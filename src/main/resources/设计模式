1、简单工厂模式。
2、策略模式：定义了一个算法族，将他们分别封装起来，使它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。
3、装饰模式（Decorator）：动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活。
4、代理模式（Proxy）：为其他对象提供一种代理以控制对这个对象的访问。
5、工厂方法模式（FactoryMethod）：定义了用于创建对象的接口，让子类决定实例化哪一个类。工厂方法将类的实例化延迟到子类。
6、原型模式（Prototype）：用原型实例指定创建对象的种类，通过拷贝这些原型创建新的对象。
7、模板方法（TemplateMethod）：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
8、外观模式（Facade）：为子系统的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
9、建造者模式（Builder）：将一个复杂对象的构建和它的表示分离，使得同样的构建过程可以创建不同的表示。
